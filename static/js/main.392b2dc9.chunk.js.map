{"version":3,"sources":["api/consts.ts","api/api.ts","api/getPokemons.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonList/PokemonList.tsx","components/PokemonStats/PokemonStats.tsx","api/getPokemon.ts","api/getPokemonTypes.ts","components/PokemonsFilter/PokemonsFilter.tsx","App.tsx","index.tsx"],"names":["POKEMONS","getData","url","fetch","then","response","json","getPokemons","offset","data","Promise","all","results","map","PokemonCard","pokemon","types","name","imageUrl","sprites","other","dream_world","front_default","skills","className","src","alt","skill","style","background","find","type","color","PokemonList","pokemons","setSelectedId","onClick","id","PokemonStats","closeStats","useState","setPokemon","useEffect","getPokemon","stats","stat","base_stat","height","width","getPokemonTypes","PokemonsFilter","selectedFilters","setSelectedFilters","options","setOptions","value","label","isMulti","onChange","filters","App","setPokemons","setOffset","selectedId","setTypes","isLoading","setIsLoading","Math","floor","random","toString","preparedPokemons","useMemo","length","preparedFilters","filter","some","includes","currentOffset","newOffset","prevData","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.392b2dc9.chunk.js","sourcesContent":["export const BASE_URL = 'https://pokeapi.co/api/v2';\nexport const POKEMONS = 'pokemon';\nexport const POKEMONS_PER_PAGE = 12;\nexport const POKEMON_TYPES = 'type';\n","import { BASE_URL } from './consts';\n\nexport const getData = (url: string) => (\n  fetch(`${BASE_URL}/${url}`)\n    .then(response => response.json())\n);\n\nexport const get = (url: string) => (\n  fetch(url)\n    .then(response => response.json())\n);\n","import { get, getData } from './api';\nimport { POKEMONS, POKEMONS_PER_PAGE } from './consts';\nimport { basePokemon, Pokemon } from '../types/types';\n\nexport const getPokemons = (offset: number): Promise<Pokemon[]> => (\n  getData(`${POKEMONS}/?limit=${POKEMONS_PER_PAGE}&offset=${offset}`)\n    .then(data => Promise.all(data.results.map((response: basePokemon) => get(response.url))))\n);\n","import React from 'react';\nimport { Pokemon, Type } from '../../types/types';\nimport './PokemonCard.scss';\n\ninterface Props {\n  pokemon: Pokemon;\n  types: Type[];\n}\n\nexport const PokemonCard: React.FC<Props> = ({ pokemon, types }: Props) => {\n  const { name } = pokemon;\n  const imageUrl = pokemon.sprites.other.dream_world.front_default;\n  const skills = pokemon.types;\n\n  return (\n    <div className=\"pokemonCard\">\n      <img\n        className=\"pokemonCard__img\"\n        src={imageUrl}\n        alt={name}\n      />\n      <div className=\"pokemonCard__name\">\n        {name}\n      </div>\n\n      <div className=\"pokemonCard__info\">\n        {skills.map(skill => (\n          <h5\n            className=\"pokemonCard__skill\"\n            key={skill.type.name}\n            style={\n              { background: `#${types.find(type => type.name === skill.type.name)?.color}` }\n            }\n          >\n            {skill.type.name}\n          </h5>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Pokemon, Type } from '../../types/types';\nimport { PokemonCard } from '../PokemonCard/PokemonCard';\nimport './PokemonList.scss';\n\ntype Props = {\n  setSelectedId: (id: number | null) => void;\n  pokemons: Pokemon[];\n  types: Type[];\n};\n\nexport const PokemonList: React.FC<Props> = ({\n  pokemons, setSelectedId, types,\n} : Props) => {\n  return (\n    <div className=\"pokemonList\">\n      {pokemons.map(pokemon => (\n        <button\n          className=\"pokemonList__button\"\n          type=\"button\"\n          onClick={() => setSelectedId(pokemon.id)}\n          key={pokemon.name}\n        >\n          <PokemonCard\n            types={types}\n            pokemon={pokemon}\n          />\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { Pokemon } from '../../types/types';\nimport { getPokemon } from '../../api/getPokemon';\nimport './PokemonStats.scss';\n\ntype Props = {\n  id: number;\n  closeStats: () => void;\n};\n\nexport const PokemonStats: React.FC<Props> = ({ id, closeStats }: Props) => {\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\n\n  useEffect(() => {\n    setPokemon(null);\n    getPokemon(id)\n      .then(data => setPokemon(data));\n  }, [id]);\n\n  if (!pokemon) {\n    return (\n      <div className=\"pokemonStats__content\">\n        <Loader\n          type=\"Oval\"\n          color=\"#000\"\n          height={150}\n          width={150}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n      <button\n        type=\"button\"\n        className=\"blur\"\n        onClick={() => closeStats()}\n      />\n      <div className=\"pokemonStats__content\">\n\n        <button\n          type=\"button\"\n          className=\"pokemonStats__closeBtn\"\n          onClick={() => closeStats()}\n        >\n          X\n        </button>\n\n        <img\n          className=\"pokemonStats__img\"\n          src={`${pokemon.sprites.other.dream_world.front_default}`}\n          alt={`${pokemon.name}`}\n        />\n\n        <div className=\"pokemonStats__content__name\">\n          {pokemon.name}\n        </div>\n\n        <table\n          className=\"pokemonStats\"\n        >\n          <tbody>\n            {pokemon.stats.map(stat => (\n              <tr\n                key={stat.stat.name}\n              >\n                <td className=\"pokemonStats__name\">\n                  <span className=\"pokemonStats__info\">\n                    {stat.stat.name}\n                  </span>\n                </td>\n\n                <td className=\"pokemonStats__stat\">\n                  <span className=\"pokemonStats__info\">\n                    {stat.base_stat}\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n\n  );\n};\n","import { getData } from './api';\nimport { POKEMONS } from './consts';\nimport { Pokemon } from '../types/types';\n\nexport const getPokemon = (id: number): Promise<Pokemon> => (\n  getData(`${POKEMONS}/${id}`).then(data => data)\n);\n","import { getData } from './api';\nimport { POKEMON_TYPES } from './consts';\nimport { PokemonType } from '../types/types';\n\nexport const getPokemonTypes = (): Promise<PokemonType[]> => (\n  getData(POKEMON_TYPES).then(data => data.results)\n);\n","import React, { useEffect, useState } from 'react';\nimport Select, { MultiValue } from 'react-select';\nimport { getPokemonTypes } from '../../api/getPokemonTypes';\nimport { ReactSelectOption } from '../../types/types';\n\ninterface Props {\n  selectedFilters: MultiValue<ReactSelectOption<string>>;\n  setSelectedFilters: (filters: MultiValue<ReactSelectOption<string>>) => void;\n  className: string;\n}\n\nexport const PokemonsFilter: React.FC<Props> = ({\n  selectedFilters, setSelectedFilters, className,\n}) => {\n  const [options, setOptions] = useState<MultiValue<ReactSelectOption<string>>>([]);\n\n  useEffect(() => {\n    getPokemonTypes()\n      .then(types => setOptions(types.map(type => (\n        {\n          value: type.name,\n          label: type.name,\n        }\n      ))));\n  }, []);\n\n  return (\n    <div className={className}>\n      <Select\n        options={options}\n        isMulti\n        value={selectedFilters}\n        onChange={(filters) => setSelectedFilters(filters)}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport { MultiValue } from 'react-select';\nimport Loader from 'react-loader-spinner';\nimport { getPokemons } from './api/getPokemons';\nimport { Pokemon, ReactSelectOption, Type } from './types/types';\nimport { PokemonList } from './components/PokemonList/PokemonList';\nimport { PokemonStats } from './components/PokemonStats/PokemonStats';\nimport { PokemonsFilter } from './components/PokemonsFilter/PokemonsFilter';\nimport { getPokemonTypes } from './api/getPokemonTypes';\n\nconst App: React.FC = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [offset, setOffset] = useState<number>(0);\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const [selectedFilters, setSelectedFilters] = useState<MultiValue<ReactSelectOption<string>>>([]);\n  const [types, setTypes] = useState<Type[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPokemonTypes()\n      .then(data => {\n        setTypes(\n          data.map(({ name }) => ({\n            name,\n            color: Math.floor(Math.random() * 16777215).toString(16),\n          })),\n        );\n        setIsLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    getPokemons(offset).then(data => setPokemons(data));\n  }, []);\n\n  const loadMore = () => {\n    setIsLoading(true);\n    setOffset(currentOffset => {\n      const newOffset = currentOffset + 12;\n\n      getPokemons(newOffset).then(data => {\n        setPokemons(prevData => [...prevData, ...data]);\n        setIsLoading(false);\n      });\n\n      return newOffset;\n    });\n  };\n\n  const preparedPokemons = useMemo(() => {\n    if (!selectedFilters.length) {\n      return pokemons;\n    }\n\n    const preparedFilters = selectedFilters.map(filter => filter.value);\n\n    return pokemons.filter(pokemon => pokemon.types.some(({ type }) => (\n      preparedFilters.includes(type.name)\n    )));\n  }, [selectedFilters, pokemons]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">\n        POKEDEX\n      </h1>\n\n      <div className=\"App__contentWrapper\">\n        <PokemonsFilter\n          selectedFilters={selectedFilters}\n          setSelectedFilters={setSelectedFilters}\n          className=\"App__filters\"\n        />\n\n        {!isLoading && !preparedPokemons.length && <h2>Have not pokemons</h2>}\n\n        <PokemonList\n          pokemons={preparedPokemons}\n          setSelectedId={setSelectedId}\n          types={types}\n        />\n\n        {isLoading && !preparedPokemons.length && (\n          <div className=\"App__loader\">\n            <Loader\n              type=\"Oval\"\n              color=\"#000\"\n              height={150}\n              width={150}\n            />\n          </div>\n        )}\n\n        {selectedId && (\n          <PokemonStats id={selectedId} closeStats={() => setSelectedId(null)} />\n        )}\n\n        <button\n          className=\"App__button\"\n          type=\"button\"\n          onClick={loadMore}\n          disabled={isLoading}\n        >\n          Load more\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}